#!/bin/bash
####################################################
#
# Tutorial for sed - like vimtutor
#
####################################################

[ -z $1 ] && PART='BASIC' || PART=${1^^}
TMPFILE=$(mktemp)


if [[ $OSTYPE =~ 'linux'  ||  $1 == '-f' ||  $2 == '-f' ]]						             		# Check if OS-type is linux							
then
	sed -E "1,/^>(${PART}|HELP)/d;/^>(ADVANCED|HELP)/,\$d" $0 > ${TMPFILE} && 	# Extract temporary tutorial-/help-file
	sed '1,/^>SOLUTIONS/d' ${TMPFILE} > ${TMPFILE}.sol &&	                  	# Extract solutions
	sed -i '/^>SOLUTIONS/,$d' ${TMPFILE} 	                                  	# Delete solutions from tutorial-file
else
	sed -E '1,/^>HELP/d' $0 > ${TMPFILE}  								  		# Extract temporary help-file
fi

# Format commands bold
# sed -i '/\!sed/{s/^/\\033\[4m/ ; s/$/\\033\[0m/;}' ${TMPFILE}

less -rN ${TMPFILE}                                                        		# Open tutorial-/help-file with less
rm ${TMPFILE}*                                                            		# Delete temporary files


exit 0

>BASIC>>>>>>>>>>>>>>>>>>>>>>>
#########################################################################
#                          												#
#    #####  ######  #####   	#######	#	 #	#######	 ####	#### 	#
#   #       #       #    #  	   #	#	 #	   #	#	 #	#   #	#
#    ####   #####   #    #  ## 	   #	#	 #	   #	#	 #	####	#
#        #  #       #    #  	   #	#	 #	   #	#	 #	#  #	#
#   #####   ######  #####   	   #	 ####	   #	 ####	#	#	#
#                           											#
#########################################################################

* THIS FILE
This file is a little interactive tutorial to learn the
basics of sed the stream editor.    

Namely it is meant for GNU-sed as used on Linux
systems. Some feature doesn't work on BSD/MacOs systems 
or they work differently.  

It is a temporary file, that is recreated every time
you run sedtutor. This way, if you mess up anything you
can close the file and restart with a clean file. 

As it is displayed in less, you can run any
command in the examples by typing an exclamation
mark (!) followed by the command. Try it: 

	!sed '10q' %

This should display the first 10 lines of the
files just like the head command. 

+ UNDERSTANDING THE FIRST COMMAND AND GET STARTED WITH SED

The '10' stands for a line number, the 'q' for 'quit'.  So
this command means: 'Quit when you reach the 10th lines!' 

Each command in sed is represented by a single letter.

The procent symbol (%) is automatical replaced by less with
the current filename. So if you try any of the given command
outside of less don't forget to use the proper filename instead.

sed processes text line by line according to commands you
pass to it between to single quotes. By default it prints
every line to standard output after it is processed. 

The original file is NOT altered by default. 

If you add the -n option to the sed command nothing is
printed unless you explicitly command it: 

	!sed -n '10q' % 

leaves you with an empty output.

You can tell sed to print to standard output with the p
command. You seperate different commands by a semicolon (;):


	!sed -n '4p ; 10q' %

p(rints) only the forth line, which contains some #-symbols
#and q(uits) after reaching the 10th line.

* HOW TO SELECT LINES BY PATTERN

So far we selected lines by the number of the line. But
often you don't care which  number a line has, but what's
written in the line. So you want to select a line by a
pattern (e.g. a word). You can easily do that in sed.   

You place the pattern between to slashes (/?/) followed by
the command: 

	!sed -n '/Show me/p' %

With the -n option to suppress all other output this
p(rints) only the following line: 

	Show me this line!

	No other line contains this
	pattern (except the sed command itself, which is
		 acutally also printed). 

-- Exercise 1 --------------------------------------------
Now try to show this line:

	Sed is an AMAZING tool!

-- To see the solution type: !sed -n 's/^1 //p' %.sol ---- 

++ CASE INSENSITVE SEARCHES

What if you don
't know, if the word your searching for is capitalized or
not? Then you can add the I-switch after the closing slash
of the search pattern: 

	!sed -n '/big/Ip' %

(p)rints each of the following lines:

	This is a big!
	But this is BIG!
	This is also kinda biG!

-- Exercise 2 -------------------------------------------
Now try to show each line of this file, that has the word
'search' in it with a case-insensitive search.  

-- Solution: !sed -n 's/^2 //p' %.sol -------------------

++ NEGATIV MATCHES

Sometimes you don't want to show or edit lines WITH but
WITHOUT a certain pattern.  

For example, when we search on a pattern in this file with a
sed-command given in the same file, this sed-command is
printed as well. It has ofcourse the pattern we look for in it. 

So we might want to exclude lines that contain the pattern
'!sed' from our search. We can do this by adding a !-switch
after the search like this: 

	!sed -n '/!sed/! {/big/Ip;}' %

The curly brackets you see here are actually an advanced
feature, that you can learn more about in the second part of
the tutorial. Here we use it to search for a pattern in all
lines that do NOT contain the first search pattern. 

Normaly a command must follow the !-switch:

	!sed -n '/sed/!p' %

p(RINTS) all line that do NOT contain the word 'sed'.

-- Exercise 3: ---------------------------------------------
Now try to print all lines that don't contain the letter e. 

-- Solution: !sed -n 's/^3 //p' %.sol ----------------------

++ SEARCH FOR BEGINNING OR END OF LINE

;; This is an important
;; comment.
This is just a line with to semicolons ;; 

Sometimes you 

* EDITING WITH SEARCH AND REPLACE

sed calls itself an editor. So far we have not actually
edited anything. In the command that showed the solution to
the first challenge you used the first real editing command:  

s stands for 'substitute'. It searches for the pattern
between to slashes and replaces it by the pattern between
the second and a third slash: 

	!sed -n ''/!sed/{s/SEARCH FOR/REPLACE BY/p;}' %

alters the following line:

	We SEARCH FOR this.

Again we can use the I-switch for a case-insensitive search.
This does ofcourse not effect the replace pattern: 

	!sed -n '/!sed/!{s/RoSe/rOsE/Ip;}' %

alters the following line (We limit the substitute to lines
containing a double quote): 
	
	"Rose is a rose is a rose is a rose." 

	(Gertrud Stein, "Sacred Emily", Geography and Plays)

You probably notice, that only the first occurence of the
word is substituted.  

This is the default behaviour of the s(ubstitute) command.
You can use the g-Switch to change it: 

	!sed -n '/sed/!{s/RoSe/rOsE/gIp;}' %

You can also select which match is replace by using a number
instead of the g: 

	!sed -n '/sed/!{s/RoSe/rOsE/2Ip;}' %

replaces the second match (in the line). 

-- Exercise 4 ------------------------------------------------
Now try to replace the 4th occurence of the word in the poem
line. 

-- Solution: !sed -n 's/^4 //p' %.sol ------------------------

+ CHANGE THE CURRENT FILE

With the (s)ubstitution we learned the first real edition
function. You might want to substitute the text in the file,
you are working on. For this sed offers you the -i option,
which stands for 'in place'.  

Read the following line:
	
	I want changes to be temporary.

Try the following command:
	
	!sed -i '/sed/! {s/be temporary/be permanent/;}' % 

and read the previous line again. You can see, that the
current file was changed in place. 

Ofcourse sed has no undo function so it's better to have a 
backup-file. If you add a suffix after the -i option, one
will be created. Some use .bak as a suffix. I prefer a
simple tilde (~).  

You can now change the sentence

	No backup no pitty.

with the following command, where 2 s(ubstitution) commands
are used, which are separated by a semicolon (;): 

	!sed -i~ '/sed/! {s/No/With a/ ; s/pitty/problem/;}' %

This seems to have worked, but now look at beginning of line
158. We better undo the changes with a simple: 

	!mv %~ %

-- WHAT HAS GONE WRONG? 

Well the 'Now' at line 158 contains the pattern 'No' which
was replaced. This is very important: sed searches for
patterns NOT for words. 

To make sure sed only replace the word 'No' we have to embed
it between two '\b'-expressions which stand for (word)
b(oundary). It's a regular expression (Look it up, if you
don't know it!) for all signs that separate words like
spaces, newlines, dashes, punction marks, etc: 

	!sed -i~ '/!sed/! {s/\bNo\b/With a/ ; s/pitty/problem/;}' %

will leave every 'Now' and 'Norbert' alone. Still EVERY 'No'
in the file is replaced, which most likely is not what you
want. So let's undo it again (!mv %~ %).

To be on the save side you should add the number of the line
before the s(ubstitute)-command:

	!sed -i~ '/!sed/! {181 s/\bNo\b/With a/ ; s/pitty/problem/;}' %

or you could search for another pattern in the line (undo before!):

	!sed -i~ '/!sed/! {/backup/ s/\bNo\b/With a/ ; s/pitty/problem/;}' %

-- Excercise 5 --------------------------------------------------
Now try to correct the typo in the following sentence:

   It's so sed, when people use vim instead of sed!

TIP: You can search for patterns in less by typing a slash
     (/) followed by the pattern 
     to find a uniq one.

-- Solution: !sed -n 's/^5 //p' %.s___----------------------------


* ERASE AND ADD LINES


* NOW WHAT ABOUT MULTIBLE LINES?

* D

>SOLUTIONS>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

1 !sed -n '/AMAZING/p' %
2 !sed -n '/search/Ip' %
3 !sed -n '/e/!p' %
4 !sed -n '/!sed/! {s/RoSe/rOsE/4Ip;}' %
5 !sed -i~ '/!sed/! {/people use/ s/sed/sad/}' % OR !sed -i~ '/!sed/! {240s/sed/sad/}' % 

>ADVANCED>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

#########################################################################
#                          												#
#    #####  ######  #####   	#######	#	 #	#######	 ####	#### 	#
#   #       #       #    #  	   #	#	 #	   #	#	 #	#   #	#
#    ####   #####   #    #  ## 	   #	#	 #	   #	#	 #	####	#
#        #  #       #    #  	   #	#	 #	   #	#	 #	#  #	#
#   #####   ######  ##### ADVANCED #	 ####	   #	 ####	#	#	#
#                         		 										#
#########################################################################

* EXPAND THE PATTERN SPACE

* HOLD SPACE

>HELP>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
sed.tutor [basic|advanced] [-f]

Run the GNU stream editor (GNU-sed) tutorial on basic (default) or advanced usage.

sed on BSD based systems like MacOS has other (less) features and syntax. Use the
-f (force) option to run on non linux based OSs anyway.

(c) Sebastian Meisel 2017; GPL 2





